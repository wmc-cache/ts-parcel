{"version":3,"sources":["src/Vue2.0/Dep.ts","src/Vue2.0/Observer.ts"],"names":[],"mappings":"cAAA,ACAA;;;;;;;;;;;;;IDEa;AACX,iBAAoC;AAAA,ACDtC,IAAA,IDCsB,CCDtB,GDCsC,ACDtC,OAAA,CAAA,OAAA,CAAA,uDDCoC,EAAE;;AAAA,ICEzB;AACX,oBAAY,IAAZ,EAAqB;ADHD,ACGC,SDHD,IAAA,GAAA,IAAA;AAAoB,IAGxC;ACCE,SAAK,IAAL,CAAU,IAAV;AACD;;;WDDD,gBAAO,GAAP,EAAe;AACb,UAAI,CCCN,EDDS,IAAI,GAAG,CAAC,ICCZ,EDDH,EAAuB,ACCzB,EAAc;ADAV,ACAU,aDAL,IAAL,CAAU,IAAV,CAAe,GAAf;AACD;AACF,ACDC,MDEF;ACDE,UAAI,CAAC,IAAD,IAAS,QAAO,IAAP,MAAgB,QAA7B,EAAuC;AACrC;AACD,OAJW,CAKZ;WDDF,kBAAM;AACJ,WAAK,IAAL,CAAU,OAAV,CAAkB,UAAC,GAAD,EAAQ;AACxB,ACAF,MAAA,EDAE,GAAG,CAAC,ACAA,CAAC,IAAP,CDAE,ACAU,IAAZ,EAAkB,OAAlB,CAA0B,UAAC,GAAD,EAAQ;ADCjC,ACAC,ODFF,CCEE,KAAI,CAAC,cAAL,CAAoB,IAApB,EAA0B,GAA1B,EAA+B,IAAI,CAAC,GAAD,CAAnC;ADCH,ACAE,OAFD;AAGD;;;WACD,wBAAe,GAAf,EAAyB,GAAzB,EAAsC,GAAtC,EAA8C;AAC5C,UAAI,IAAI,GAAG,IAAX,CAD4C,CAE5C;ADnBJ,OAAA,CAAA,GAAA,GAAA,GAAA;ACoBI,UAAI,GAAG,GAAG,IAAI,KAAA,CAAA,GAAJ,EAAV,CAH4C,CAK5C;;AACA,MAAA,IAAI,CAAC,IAAL,CAAU,GAAV;AACA,MAAA,MAAM,CAAC,cAAP,CAAsB,GAAtB,EAA2B,GAA3B,EAAgC;AAC9B,QAAA,UAAU,EAAE,IADkB;AAE9B,QAAA,YAAY,EAAE,IAFgB;AAG9B,QAAA,GAH8B,iBAG3B;AACD;AACA,UAAA,KAAA,CAAA,GAAA,CAAI,MAAJ,IAAc,GAAG,CAAC,MAAJ,CAAW,KAAA,CAAA,GAAA,CAAI,MAAf,CAAd;AACA,UAAA,OAAO,CAAC,GAAR,CAAY,KAAA,CAAA,GAAA,CAAI,MAAhB;AACA,iBAAO,GAAP;AACD,SAR6B;AAS9B,QAAA,GAT8B,eAS1B,QAT0B,EASlB;AACV,cAAI,QAAQ,KAAK,GAAjB,EAAsB;AACpB;AACD;;AACD,UAAA,GAAG,GAAG,QAAN;AACA,UAAA,IAAI,CAAC,IAAL,CAAU,QAAV,EALU,CAMV;;AACA,UAAA,GAAG,CAAC,MAAJ;AACD;AAjB6B,OAAhC;AAmBD;;;;;;AAxCH,OAAA,CAAA,QAAA,GAAA,QAAA","file":"Observer.f98144f0.js","sourceRoot":"..","sourcesContent":["//Dep 的角色，宛如一个“工具人”，它是 Watcher 和 Observer 之间的纽带，是“通信兵”\n\nexport class Dep {\n  constructor(private subs: any[] = []) {}\n  // 存储所有的观察者\n  static target: any\n  // 添加观察者\n  addSub(sub: any) {\n    if (sub && sub.update) {\n      this.subs.push(sub)\n    }\n  }\n  // 发送通知\n  notify() {\n    this.subs.forEach((sub) => {\n      sub.update()\n    })\n  }\n}\n","//Observer 的作用是遍历所有的属性，给它们安装上 getter / setter 方法\n\nimport { Dep } from \"./Dep\"\n\n\nexport class Observer {\n  constructor(data: any) {\n    this.walk(data)\n  }\n  walk(data: any) {\n    // 1. 判断data是否是对象\n    if (!data || typeof data !== 'object') {\n      return\n    }\n    // 2.遍历data对象的所有属性\n    Object.keys(data).forEach((key) => {\n      this.defineReactive(data, key, data[key])\n    })\n  }\n  defineReactive(obj: any, key: string, val: any) {\n    let that = this\n    // 负责收集依赖, 并发送通知\n    let dep = new Dep()\n\n    // 如果是val对象,把val内部的属性转换成响应式对象\n    that.walk(val)\n    Object.defineProperty(obj, key, {\n      enumerable: true,\n      configurable: true,\n      get() {\n        // 收集依赖\n        Dep.target && dep.addSub(Dep.target)\n        console.log(Dep.target)\n        return val\n      },\n      set(newValue) {\n        if (newValue === val) {\n          return\n        }\n        val = newValue\n        that.walk(newValue)\n        // 发送通知\n        dep.notify()\n      },\n    })\n  }\n}\n"]}